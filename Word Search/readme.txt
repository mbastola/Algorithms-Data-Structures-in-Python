The search method using a list would be O(n) as it should go through entire list and search for the word. And since there are many words, the n would be a big number.In the case when prefix is the word itself, then the runtime would be O(n). Else, the prefix of the word might not be in out dictionary. eg word "Computer" will be added to the list and we could find it with search method. However prefix "Com" might not be in out list as its not a word in itself so we will have to either look for every letter in the word in the list to find it or else it will return False.


The hash table might be efficient over lists depending on their hash functions.They might take a little bit less space than lists and With small load,the search would be O(1) but if the load is high enough (as in our dictionary with lots of words), there will be many collisions and the hash table with degenrate to O(n) eventually. The isPrefix() method would also be O(n). It does have much overhead.

The use of Trie has made search function higly efficient. First letter in the Word will have O(1) access.Then you search through the other letters in the word. For word of 'm' letters the search function would have runtime of O(m) if its present in the Trie else even less. Thus it has a runtime of O(m) for search and isPrefix.  It uses less memory as when adding words, all the letters neednt be added as in lists or hash tables. When you add 'lovely', it will add nodes for 'l' and 'y' if word 'love' is already present in the Trie. This decreases overheads and even leads to less spacing problems

